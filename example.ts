import { define, expand, invoke } from ".";
import { z } from "zod";

/* Standard Fn -- human written code is evaluated at invocation //
def add(a: number, b: number): number {
    return a + b
}
result = add(1, 2)
*/
function add(a: number, b: number): { result: number } {
  return { result: a + b };
}
const result1 = add(1, 2);
console.log(">>>>> result1", result1); // { result: 3 }

/* LLM Generated Fn -- code is generated by model during build, and evaluated at invocation // 
def gen multiply(a: number, b: number): number
result = multiply(1.83, 23)
*/
define(
  "multiply",
  z.object({ a: z.number(), b: z.number() }),
  z.object({ result: z.number() })
);
const result2 = await invoke("multiply", { a: 12.1, b: 23 });
console.log(">>>>> result2", result2); // { result: 278.3 }

/* LLM Evaluated Fn -- model decides the answer at invocation //
def reason isPhoneNumber(maybePhoneNumber: string): boolean
result = isPhoneNumber("123")
*/
define(
  "isPhoneNumber",
  z.object({ maybePhoneNumber: z.string() }),
  z.object({ isPhoneNumber: z.boolean() })
);
const result3 = await invoke("isPhoneNumber", { maybePhoneNumber: "123" });
console.log(">>>>> result3", result3); // { isPhoneNumber: false }

/* LLM Inferred Types -- model can also deduce more elaborate types from names or examples e.g. countries //
def reason getCountryFromPhoneNumber(phoneNumber: string): enum<Countries>
result = getCountryFromPhoneNumber("123")
*/
define(
  "getCountryFromPhoneNumber",
  z.object({ phoneNumber: z.string() }),
  z.object({
    country: z.enum((await expand("Countries")) as [string, ...string[]]),
  })
);
const result4 = await invoke("getCountryFromPhoneNumber", {
  phoneNumber: "+16208039306",
});
console.log(">>>>> result4", result4); // { country: 'United States' }
